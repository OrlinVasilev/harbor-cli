name: Dagger Release Pipeline

on:
  push:
    tags:
      - "v*"
    branches: [dagger-cicd]

permissions:
  contents: write
  packages: write

jobs:
  publish-release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21"
          cache: true

      - name: Run Dagger Release
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: go run ci/release.go release ${{ env.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Check for existing SBOM
        id: check_sbom
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const { data: { assets } } = await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', '')
            });

            const sbomExists = assets.some(asset => asset.name === `harbor_${context.ref.replace('refs/tags/', '')}.sbom`);
            return sbomExists;

      - name: Upload SBOM
        if: steps.check_sbom.outputs.sbomExists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: path/to/harbor_{{ github.ref }}.sbom
          asset_name: harbor_${{ github.ref }}.sbom
          asset_content_type: application/vnd.ms-spdx+json
